{"version":3,"file":"jsforce-api-tooling.min.js","sources":["jsforce-api-tooling.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Tooling","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_","Cache","conn","_conn","_logger","delegates","forEach","method","constructor","prototype","cache","cacheOptions","key","type","describe$","makeCacheable","describe","makeResponseCacheable","describeSObject$","describeSObject","describeGlobal$","describeGlobal","initialize","sobjects","clear","get","on","bind","res","result","types","map","so","name","each","sobject","_baseUrl","request","apply","arguments","executeAnonymous","body","callback","url","encodeURIComponent","thenCall","runTestsAsynchronous","classids","join","completions","isString"],"mappings":"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","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Tooling = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\r\n * @file Manages Tooling APIs\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar util  = jsforce.require('util'),\r\n    _     = jsforce.require('underscore'),\r\n    Cache = jsforce.require('./cache');\r\n\r\n/**\r\n * API class for Tooling API call\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection\r\n */\r\nvar Tooling = function(conn) {\r\n  this._conn = conn;\r\n  this._logger = conn._logger;\r\n  var delegates = [\r\n    \"query\",\r\n    \"queryMore\",\r\n    \"create\",\r\n    \"insert\",\r\n    \"retrieve\",\r\n    \"update\",\r\n    \"upsert\",\r\n    \"del\",\r\n    \"delete\",\r\n    \"destroy\",\r\n    \"describe\",\r\n    \"describeGlobal\",\r\n    \"sobject\"\r\n  ];\r\n  delegates.forEach(function(method) {\r\n    this[method] = conn.constructor.prototype[method];\r\n  }, this);\r\n\r\n  this.cache = new Cache();\r\n\r\n  var cacheOptions = {\r\n    key: function(type) { return type ? \"describe.\" + type : \"describe\"; }\r\n  };\r\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\r\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\r\n  this.describeSObject$ = this.describe$;\r\n  this.describeSObject = this.describe;\r\n\r\n  cacheOptions = { key: 'describeGlobal' };\r\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\r\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\r\n\r\n  this.initialize();\r\n};\r\n\r\n/**\r\n * Initialize tooling API\r\n * @protected\r\n */\r\nTooling.prototype.initialize = function() {\r\n  this.sobjects = {};\r\n  this.cache.clear();\r\n  this.cache.get('describeGlobal').on('value', _.bind(function(res) {\r\n    if (res.result) {\r\n      var types = _.map(res.result.sobjects, function(so) { return so.name; });\r\n      _.each(types, this.sobject, this);\r\n    }\r\n  }, this));\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTooling.prototype._baseUrl = function() {\r\n  return this._conn._baseUrl() + \"/tooling\";\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTooling.prototype.request = function() {\r\n  return this._conn.request.apply(this._conn, arguments);\r\n};\r\n\r\n/**\r\n * Execute query by using SOQL\r\n * \r\n * @param {String} soql - SOQL string\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\n/**\r\n * Query next record set by using query locator\r\n *\r\n * @method Tooling#query\r\n * @param {String} locator - Next record set locator\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\n/**\r\n * Retrieve specified records\r\n *\r\n * @method Tooling#queryMore\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A record ID or array of record IDs \r\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\r\n * @returns {Promise.<Record|Array.<Record>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#create()\r\n *\r\n * @method Tooling#insert\r\n * @param {String} type - SObject Type\r\n * @param {Object|Array.<Object>} records - A record or array of records to create\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Create records\r\n *\r\n * @method Tooling#create\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - A record or array of records to create\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Update records\r\n *\r\n * @method Tooling#update\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - A record or array of records to update\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Upsert records\r\n *\r\n * @method Tooling#upsert\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\r\n * @param {String} extIdField - External ID field name\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#destroy()\r\n *\r\n * @method Tooling#delete\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Synonym of Tooling#destroy()\r\n *\r\n * @method Tooling#del\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Delete records\r\n *\r\n * @method Tooling#destroy\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#describe()\r\n *\r\n * @method Tooling#describeSObject\r\n * @param {String} type - SObject Type\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\n/**\r\n * Describe SObject metadata\r\n *\r\n * @method Tooling#describe\r\n * @param {String} type - SObject Type\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\n\r\n/**\r\n * Describe global SObjects\r\n *\r\n * @method Tooling#describeGlobal\r\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeGlobalResult>}\r\n */\r\n\r\n/**\r\n * Get SObject instance\r\n *\r\n * @method Tooling#sobject\r\n * @param {String} type - SObject Type\r\n * @returns {SObject}\r\n */\r\n\r\n/**\r\n * @typedef {Object} Tooling~ExecuteAnonymousResult\r\n * @prop {Boolean} compiled - Flag if the query is compiled successfully\r\n * @prop {String} compileProblem - Error reason in compilation\r\n * @prop {Boolean} success - Flag if the code is executed successfully\r\n * @prop {Number} line - Line number for the error\r\n * @prop {Number} column - Column number for the error\r\n * @prop {String} exceptionMessage - Exception message\r\n * @prop {String} exceptionStackTrace - Exception stack trace\r\n */\r\n/**\r\n * Executes Apex code anonymously\r\n *\r\n * @param {String} body - Anonymous Apex code\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.executeAnonymous = function(body, callback) {\r\n  var url = this._baseUrl() + \"/executeAnonymous?anonymousBody=\" + encodeURIComponent(body);\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Executes Apex tests asynchronously\r\n *\r\n * @param {Array.<String>} classids - Comma separated list of class IDs\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.runTestsAsynchronous = function(classids, callback) {\r\n  var url = this._baseUrl() + \"/runTestsAsynchronous/?classids=\" + classids.join(',');\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Tooling~CompletionsResult\r\n * @prop {Object} publicDeclarations\r\n */\r\n/**\r\n * Retrieves available code completions of the referenced type\r\n *\r\n * @param {String} [type] - completion type (default 'apex')\r\n * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~CompletionsResult>}\r\n */\r\nTooling.prototype.completions = function(type, callback) {\r\n  if (!_.isString(type)) {\r\n    callback = type;\r\n    type = 'apex';\r\n  }\r\n  var url = this._baseUrl() + \"/completions?type=\" + encodeURIComponent(type);\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n\r\nmodule.exports = Tooling;\r\n\n},{}]},{},[1])(1)\n});"]}