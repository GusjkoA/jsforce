{"version":3,"file":"jsforce-api-chatter.min.js","sources":["jsforce-api-chatter.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Chatter","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"inherits","_","Promise","conn","_conn","prototype","_request","params","callback","test","method","isObject","body","headers","Content-Type","JSON","stringify","url","_normalizeUrl","request","indexOf","version","Request","thenCall","resource","queryParams","Resource","batch","requests","batchRequests","batchDeferreds","forEach","deferred","defer","_promise","promise","push","batchParams","then","res","results","result","statusCode","reject","resolve","chatter","_chatter","_params","richInput","stream","onResolve","onReject","isFunction","qstring","map","keys","name","encodeURIComponent","join","super_","_url","create","data","retrieve","update","del"],"mappings":"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","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Chatter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\r\n * @file Manages Salesforce Chatter REST API calls\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar inherits = jsforce.require('inherits'),\r\n    _       = jsforce.require('underscore'),\r\n    Promise = jsforce.require('./promise');\r\n\r\n/**\r\n * API class for Chatter REST API call\r\n *\r\n * @class\r\n * @param {Connection} conn Connection\r\n */\r\nvar Chatter = module.exports = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * Sending request to API endpoint\r\n * @private\r\n */\r\nChatter.prototype._request = function(params, callback) {\r\n  if (/^(put|post|patch)$/i.test(params.method)) {\r\n    if (_.isObject(params.body)) {\r\n      params.headers = {\r\n        \"Content-Type\": \"application/json\"\r\n      };\r\n      params.body = JSON.stringify(params.body);\r\n    }\r\n  }\r\n  params.url = this._normalizeUrl(params.url);\r\n  return this._conn.request(params, callback);\r\n};\r\n\r\n/**\r\n * Convert path to site root relative url\r\n * @private\r\n */\r\nChatter.prototype._normalizeUrl = function(url) {\r\n  if (url.indexOf('/chatter/') === 0 || url.indexOf('/connect/') === 0) {\r\n    return '/services/data/v' + this._conn.version + url;\r\n  } else if (/^\\/v[\\d]+\\.[\\d]+\\//.test(url)) {\r\n    return '/services/data' + url;\r\n  } else if (url.indexOf('/services/') !== 0 && url[0] === '/') {\r\n    return '/services/data/v' + this._conn.version + '/chatter' + url;\r\n  } else {\r\n    return url;\r\n  }\r\n};\r\n\r\n/**\r\n * @typedef {Object} Chatter~RequestParams\r\n * @prop {String} method - HTTP method\r\n * @prop {String} url - Resource URL\r\n * @prop {String} [body] - HTTP body (in POST/PUT/PATCH methods)\r\n */\r\n\r\n/**\r\n * @typedef {Object} Chatter~RequestResult\r\n */\r\n\r\n/**\r\n * Make a request for chatter API resource\r\n *\r\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback func\r\n * @returns {Chatter~Request}\r\n */\r\nChatter.prototype.request = function(params, callback) {\r\n  return new Request(this, params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Make a resource request to chatter API\r\n *\r\n * @param {String} url - Resource URL\r\n * @param {Object} [queryParams] - Query parameters (in hash object)\r\n * @returns {Chatter~Resource}\r\n */\r\nChatter.prototype.resource = function(url, queryParams) {\r\n  return new Resource(this, url, queryParams);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Chatter~BatchRequestResult\r\n * @prop {Boolean} hasError - Flag if the batch has one or more errors\r\n * @prop {Array.<Object>} results - Batch request results in array\r\n * @prop {Number} results.statusCode - HTTP response status code\r\n * @prop {Chatter~RequestResult} results.result - Parsed HTTP response body\r\n */\r\n\r\n/**\r\n * Make a batch request to chatter API\r\n *\r\n * @params {Array.<Chatter~Request>} requests - Chatter API requests\r\n * @param {Callback.<Chatter~BatchRequestResult>} [callback] - Callback func\r\n * @returns {Promise.<Chatter~BatchRequestResult>}\r\n */\r\nChatter.prototype.batch = function(requests, callback) {\r\n  var self = this;\r\n  var batchRequests = [], batchDeferreds = [];\r\n  _.forEach(requests, function(request) {\r\n    var deferred = Promise.defer();\r\n    request._promise = deferred.promise;\r\n    batchRequests.push(request.batchParams());\r\n    batchDeferreds.push(deferred);\r\n  });\r\n  var params = {\r\n    method: 'POST',\r\n    url: this._normalizeUrl('/connect/batch'),\r\n    body: {\r\n      batchRequests: batchRequests\r\n    }\r\n  };\r\n  return this.request(params).then(function(res) {\r\n    _.forEach(res.results, function(result, i) {\r\n      var deferred = batchDeferreds[i];\r\n      if (result.statusCode >= 400) {\r\n        deferred.reject(result.result);\r\n      } else {\r\n        deferred.resolve(result.result);\r\n      }\r\n    });\r\n    return res;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * A class representing chatter API request\r\n *\r\n * @protected\r\n * @class Chatter~Request\r\n * @implements {Promise.<Chatter~RequestResult>}\r\n * @param {Chatter} chatter - Chatter API object\r\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\r\n */\r\nvar Request = function(chatter, params) {\r\n  this._chatter = chatter;\r\n  this._params = params;\r\n  this._promise = null;\r\n};\r\n\r\n/**\r\n * @typedef {Object} Chatter~BatchRequestParams\r\n * @prop {String} method - HTTP method\r\n * @prop {String} url - Resource URL\r\n * @prop {String} [richInput] - HTTP body (in POST/PUT/PATCH methods)\r\n */\r\n\r\n/**\r\n * Retrieve parameters in batch request form\r\n *\r\n * @method Chatter~Request#batchParams\r\n * @returns {Chatter~BatchRequestParams}\r\n */\r\nRequest.prototype.batchParams = function() {\r\n  var params = this._params;\r\n  var batchParams = {\r\n    method: params.method,\r\n    url: this._chatter._normalizeUrl(params.url)\r\n  };\r\n  if (this._params.body) {\r\n    batchParams.richInput = this._params.body;\r\n  }\r\n  return batchParams;\r\n};\r\n\r\n/**\r\n * Retrieve parameters in batch request form\r\n *\r\n * @method Chatter~Request#promise\r\n * @returns {Promise.<Chatter~RequestResult>}\r\n */\r\nRequest.prototype.promise = function() {\r\n  return this._promise || this._chatter._request(this._params);\r\n};\r\n\r\n/**\r\n * Returns Node.js Stream object for request\r\n *\r\n * @method Chatter~Request#stream\r\n * @returns {stream.Stream}\r\n */\r\nRequest.prototype.stream = function() {\r\n  return this._chatter._request(this._params).stream();\r\n};\r\n\r\n/**\r\n * Promise/A+ interface\r\n * http://promises-aplus.github.io/promises-spec/\r\n *\r\n * Delegate to deferred promise, return promise instance for batch result\r\n *\r\n * @method Chatter~Request#then\r\n */\r\nRequest.prototype.then = function(onResolve, onReject) {\r\n  return this.promise().then(onResolve, onReject);\r\n};\r\n\r\n/**\r\n * Promise/A+ extension\r\n * Call \"then\" using given node-style callback function\r\n *\r\n * @method Chatter~Request#thenCall\r\n */\r\nRequest.prototype.thenCall = function(callback) {\r\n  return _.isFunction(callback) ? this.promise().thenCall(callback) : this;\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * A class representing chatter API resource\r\n *\r\n * @protected\r\n * @class Chatter~Resource\r\n * @extends Chatter~Request\r\n * @param {Chatter} chatter - Chatter API object\r\n * @param {String} url - Resource URL\r\n * @param {Object} [queryParams] - Query parameters (in hash object)\r\n */\r\nvar Resource = function(chatter, url, queryParams) {\r\n  if (queryParams) {\r\n    var qstring = _.map(_.keys(queryParams), function(name) {\r\n      return name + \"=\" + encodeURIComponent(queryParams[name]);\r\n    }).join('&');\r\n    url += (url.indexOf('?') > 0 ? '&' : '?') + qstring;\r\n  }\r\n  Resource.super_.call(this, chatter, { method: 'GET', url: url });\r\n  this._url = url;\r\n};\r\n\r\ninherits(Resource, Request);\r\n\r\n/**\r\n * Create a new resource\r\n *\r\n * @method Chatter~Resource#create\r\n * @param {Object} data - Data to newly post\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\r\n * @returns {Chatter~Request}\r\n */\r\nResource.prototype.create = function(data, callback) {\r\n  return this._chatter.request({\r\n    method: 'POST',\r\n    url: this._url,\r\n    body: data\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Retrieve resource content\r\n *\r\n * @method Chatter~Resource#retrieve\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\r\n * @returns {Chatter~Request}\r\n */\r\nResource.prototype.retrieve = function(callback) {\r\n  return this.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Update specified resource\r\n *\r\n * @method Chatter~Resource#update\r\n * @param {Obejct} data - Data to update\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\r\n * @returns {Chatter~Request}\r\n */\r\nResource.prototype.update = function(data, callback) {\r\n  return this._chatter.request({\r\n    method: 'POST',\r\n    url: this._url,\r\n    body: data\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Resource#delete()\r\n *\r\n * @method Chatter~Resource#del\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\r\n * @returns {Chatter~Request}\r\n */\r\n/**\r\n * Delete specified resource\r\n *\r\n * @method Chatter~Resource#delete\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\r\n * @returns {Chatter~Request}\r\n */\r\nResource.prototype.del =\r\nResource.prototype[\"delete\"] = function(callback) {\r\n  return this._chatter.request({\r\n    method: 'DELETE',\r\n    url: this._url\r\n  }).thenCall(callback);\r\n};\r\n\n},{}]},{},[1])(1)\n});"]}